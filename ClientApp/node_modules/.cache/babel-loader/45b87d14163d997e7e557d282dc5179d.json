{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Documents\\\\Uni\\\\IBSYS2\\\\ibsys.pps\\\\ClientApp\\\\src\\\\components\\\\Home.js\";\nimport React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport { FilePond } from \"react-filepond\";\nexport default function Home() {\n  const DragContainer = styled.div`\n    text-align: center;\n  `;\n  const dropZone = useRef(null);\n  const [results, setResults] = useState(undefined);\n  return /*#__PURE__*/React.createElement(DragContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"sys-home-margin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, \"Simulationsdatei hochladen\"), /*#__PURE__*/React.createElement(FilePond, {\n    ref: dropZone,\n    allowMultiple: false,\n    acceptedFileTypes: [\"text/xml\"],\n    instantUpload: true,\n    dropOnPage: true,\n    maxParallelUploads: 1,\n    server: {\n      timeout: 5000,\n      fetch: null,\n      revert: null,\n      process: (fieldName, file, metadata, load, error, progress) => {\n        console.log(dropZone.current);\n        const encodedXML = dropZone.current.getFile().getFileEncodeBase64String();\n        const decodedXML = atob(encodedXML);\n        axios({\n          url: \"https://localhost:3000\",\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/xml\"\n          },\n          data: decodedXML,\n          onUploadProgress: e => {\n            progress(e.lengthComputable, e.loaded, e.total);\n          }\n        }).then(function (response) {\n          console.log(response);\n\n          if (response.status >= 200 && response.status < 300) {\n            load(response);\n            setResults(response.data);\n          } else {\n            error(\"Upload fehlgeschlagen\");\n          }\n        }).catch(function (errorMessage) {\n          error(\"Upload fehlgeschlagen\");\n          const response = errorMessage.response;\n        });\n      }\n    },\n    Datei: true,\n    hochladen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary btn-lg sys-home-margin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Simulation starten\"));\n}","map":{"version":3,"sources":["C:/Users/Alex/Documents/Uni/IBSYS2/ibsys.pps/ClientApp/src/components/Home.js"],"names":["React","useRef","useState","styled","axios","FilePond","Home","DragContainer","div","dropZone","results","setResults","undefined","timeout","fetch","revert","process","fieldName","file","metadata","load","error","progress","console","log","current","encodedXML","getFile","getFileEncodeBase64String","decodedXML","atob","url","method","headers","data","onUploadProgress","e","lengthComputable","loaded","total","then","response","status","catch","errorMessage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B,QAAMC,aAAa,GAAGJ,MAAM,CAACK,GAAI;;GAAjC;AAIA,QAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAACU,SAAD,CAAtC;AAEA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,eAEE,oBAAC,QAAD;AACE,IAAA,GAAG,EAAEH,QADP;AAEE,IAAA,aAAa,EAAE,KAFjB;AAGE,IAAA,iBAAiB,EAAE,CAAC,UAAD,CAHrB;AAIE,IAAA,aAAa,EAAE,IAJjB;AAKE,IAAA,UAAU,EAAE,IALd;AAME,IAAA,kBAAkB,EAAE,CANtB;AAOE,IAAA,MAAM,EAAE;AACNI,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,KAAK,EAAE,IAFD;AAGNC,MAAAA,MAAM,EAAE,IAHF;AAINC,MAAAA,OAAO,EAAE,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,QAAlB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyCC,QAAzC,KAAsD;AAC7DC,QAAAA,OAAO,CAACC,GAAR,CAAYf,QAAQ,CAACgB,OAArB;AACA,cAAMC,UAAU,GAAGjB,QAAQ,CAACgB,OAAT,CAChBE,OADgB,GAEhBC,yBAFgB,EAAnB;AAGA,cAAMC,UAAU,GAAGC,IAAI,CAACJ,UAAD,CAAvB;AAEAtB,QAAAA,KAAK,CAAC;AACJ2B,UAAAA,GAAG,EAAE,wBADD;AAEJC,UAAAA,MAAM,EAAE,MAFJ;AAGJC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB,WAHL;AAIJC,UAAAA,IAAI,EAAEL,UAJF;AAKJM,UAAAA,gBAAgB,EAAGC,CAAD,IAAO;AACvBd,YAAAA,QAAQ,CAACc,CAAC,CAACC,gBAAH,EAAqBD,CAAC,CAACE,MAAvB,EAA+BF,CAAC,CAACG,KAAjC,CAAR;AACD;AAPG,SAAD,CAAL,CASGC,IATH,CASQ,UAAUC,QAAV,EAAoB;AACxBlB,UAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAZ;;AACA,cAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACnDtB,YAAAA,IAAI,CAACqB,QAAD,CAAJ;AACA9B,YAAAA,UAAU,CAAC8B,QAAQ,CAACP,IAAV,CAAV;AACD,WAHD,MAGO;AACLb,YAAAA,KAAK,CAAC,uBAAD,CAAL;AACD;AACF,SAjBH,EAkBGsB,KAlBH,CAkBS,UAAUC,YAAV,EAAwB;AAC7BvB,UAAAA,KAAK,CAAC,uBAAD,CAAL;AACA,gBAAMoB,QAAQ,GAAGG,YAAY,CAACH,QAA9B;AACD,SArBH;AAsBD;AAjCK,KAPV;AA0CE,IAAA,KAAK,MA1CP;AA2CE,IAAA,SAAS,MA3CX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eA+CE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,wCAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BA/CF,CADF;AAqDD","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport { FilePond } from \"react-filepond\";\r\n\r\nexport default function Home() {\r\n  const DragContainer = styled.div`\r\n    text-align: center;\r\n  `;\r\n\r\n  const dropZone = useRef(null);\r\n\r\n  const [results, setResults] = useState(undefined);\r\n\r\n  return (\r\n    <DragContainer>\r\n      <h1 className=\"sys-home-margin\">Simulationsdatei hochladen</h1>\r\n      <FilePond\r\n        ref={dropZone}\r\n        allowMultiple={false}\r\n        acceptedFileTypes={[\"text/xml\"]}\r\n        instantUpload={true}\r\n        dropOnPage={true}\r\n        maxParallelUploads={1}\r\n        server={{\r\n          timeout: 5000,\r\n          fetch: null,\r\n          revert: null,\r\n          process: (fieldName, file, metadata, load, error, progress) => {\r\n            console.log(dropZone.current);\r\n            const encodedXML = dropZone.current\r\n              .getFile()\r\n              .getFileEncodeBase64String();\r\n            const decodedXML = atob(encodedXML);\r\n\r\n            axios({\r\n              url: \"https://localhost:3000\",\r\n              method: \"POST\",\r\n              headers: { \"Content-Type\": \"application/xml\" },\r\n              data: decodedXML,\r\n              onUploadProgress: (e) => {\r\n                progress(e.lengthComputable, e.loaded, e.total);\r\n              },\r\n            })\r\n              .then(function (response) {\r\n                console.log(response);\r\n                if (response.status >= 200 && response.status < 300) {\r\n                  load(response);\r\n                  setResults(response.data);\r\n                } else {\r\n                  error(\"Upload fehlgeschlagen\");\r\n                }\r\n              })\r\n              .catch(function (errorMessage) {\r\n                error(\"Upload fehlgeschlagen\");\r\n                const response = errorMessage.response;\r\n              });\r\n          },\r\n        }}\r\n        Datei\r\n        hochladen\r\n      />\r\n      <button type=\"button\" className=\"btn btn-primary btn-lg sys-home-margin\">\r\n        Simulation starten\r\n      </button>\r\n    </DragContainer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}